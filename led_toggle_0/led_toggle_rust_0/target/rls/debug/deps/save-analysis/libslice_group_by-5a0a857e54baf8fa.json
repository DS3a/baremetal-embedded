{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6","program":"/home/d33p/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","slice_group_by","--edition=2018","/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=5a0a857e54baf8fa","-C","extra-filename=-5a0a857e54baf8fa","--out-dir","/home/d33p/dev/BareMetal/baremetal-embedded/led_toggle_0/led_toggle_rust_0/target/rls/debug/deps","-L","dependency=/home/d33p/dev/BareMetal/baremetal-embedded/led_toggle_0/led_toggle_rust_0/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/d33p/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/d33p/dev/BareMetal/baremetal-embedded/led_toggle_0/led_toggle_rust_0/target/rls/debug/deps/libslice_group_by-5a0a857e54baf8fa.rmeta"},"prelude":{"crate_id":{"name":"slice_group_by","disambiguator":[6475953954003218341,7200597999038179163]},"crate_root":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src","external_crates":[{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8363989277313806732,13723635736355452392]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5755871685339259462,14524450630327408145]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6095990061662150844,17257511342173735843]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13534664360101634333,15955848543282431589]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2576337310504802494,7533979301291365915]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5114841071718684731,1147767992231475921]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14891534813972024149,13771932312545804845]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[904103305253144465,12292134317329413205]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[16314738562439622889,10306027504818249940]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15843431334828571128,5286674190927770495]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17405625562201081622,10275716470817790619]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11445955052790897216,5818918092474945162]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[14649202847011715524,6782578055671422766]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[7180995537586922820,7051902941398327739]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[9612987991627917998,10712864082221106628]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[17826240478786457486,5527832178130695808]}},{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6600453779972510942,5977101663316138555]}}],"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":0,"byte_end":22454,"line_start":1,"line_end":658,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4290,"byte_end":4306,"line_start":143,"line_end":143,"column_start":5,"column_end":21},"alias_span":null,"name":"LinearGroupByKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4312,"byte_end":4325,"line_start":144,"line_end":144,"column_start":5,"column_end":18},"alias_span":null,"name":"LinearGroupBy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":9},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4331,"byte_end":4342,"line_start":145,"line_end":145,"column_start":5,"column_end":16},"alias_span":null,"name":"LinearGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":114},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4348,"byte_end":4367,"line_start":146,"line_end":146,"column_start":5,"column_end":24},"alias_span":null,"name":"LinearGroupByKeyMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":59},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4373,"byte_end":4389,"line_start":147,"line_end":147,"column_start":5,"column_end":21},"alias_span":null,"name":"LinearGroupByMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4395,"byte_end":4409,"line_start":148,"line_end":148,"column_start":5,"column_end":19},"alias_span":null,"name":"LinearGroupMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":239},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4449,"byte_end":4465,"line_start":152,"line_end":152,"column_start":5,"column_end":21},"alias_span":null,"name":"BinaryGroupByKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":181},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4471,"byte_end":4484,"line_start":153,"line_end":153,"column_start":5,"column_end":18},"alias_span":null,"name":"BinaryGroupBy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":151},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4490,"byte_end":4501,"line_start":154,"line_end":154,"column_start":5,"column_end":16},"alias_span":null,"name":"BinaryGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":262},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4507,"byte_end":4526,"line_start":155,"line_end":155,"column_start":5,"column_end":24},"alias_span":null,"name":"BinaryGroupByKeyMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":204},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4532,"byte_end":4548,"line_start":156,"line_end":156,"column_start":5,"column_end":21},"alias_span":null,"name":"BinaryGroupByMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":160},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4554,"byte_end":4568,"line_start":157,"line_end":157,"column_start":5,"column_end":19},"alias_span":null,"name":"BinaryGroupMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":391},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4613,"byte_end":4634,"line_start":161,"line_end":161,"column_start":5,"column_end":26},"alias_span":null,"name":"ExponentialGroupByKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":331},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4640,"byte_end":4658,"line_start":162,"line_end":162,"column_start":5,"column_end":23},"alias_span":null,"name":"ExponentialGroupBy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":299},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4664,"byte_end":4680,"line_start":163,"line_end":163,"column_start":5,"column_end":21},"alias_span":null,"name":"ExponentialGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":414},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4686,"byte_end":4710,"line_start":164,"line_end":164,"column_start":5,"column_end":29},"alias_span":null,"name":"ExponentialGroupByKeyMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":354},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4716,"byte_end":4737,"line_start":165,"line_end":165,"column_start":5,"column_end":26},"alias_span":null,"name":"ExponentialGroupByMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":308},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4743,"byte_end":4762,"line_start":166,"line_end":166,"column_start":5,"column_end":24},"alias_span":null,"name":"ExponentialGroupMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":504},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4806,"byte_end":4825,"line_start":170,"line_end":170,"column_start":5,"column_end":24},"alias_span":null,"name":"LinearStrGroupByKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":477},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4831,"byte_end":4847,"line_start":171,"line_end":171,"column_start":5,"column_end":21},"alias_span":null,"name":"LinearStrGroupBy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":452},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4853,"byte_end":4867,"line_start":172,"line_end":172,"column_start":5,"column_end":19},"alias_span":null,"name":"LinearStrGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":513},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4873,"byte_end":4895,"line_start":173,"line_end":173,"column_start":5,"column_end":27},"alias_span":null,"name":"LinearStrGroupByKeyMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4901,"byte_end":4920,"line_start":174,"line_end":174,"column_start":5,"column_end":24},"alias_span":null,"name":"LinearStrGroupByMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":460},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":4926,"byte_end":4943,"line_start":175,"line_end":175,"column_start":5,"column_end":22},"alias_span":null,"name":"LinearStrGroupMut","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":0,"byte_end":22454,"line_start":1,"line_end":658,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":146},{"krate":0,"index":294},{"krate":0,"index":446},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":583},{"krate":0,"index":603},{"krate":0,"index":623},{"krate":0,"index":643},{"krate":0,"index":663},{"krate":0,"index":670},{"krate":0,"index":677},{"krate":0,"index":684}],"decl_id":null,"docs":" Crate `slice-group-by` is a library for efficiently iterating on a slice by groups defined by\n a function that specifies if two elements are in the same group.","sig":null,"attributes":[{"value":"/ Crate `slice-group-by` is a library for efficiently iterating on a slice by groups defined by","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":0,"byte_end":97,"line_start":1,"line_end":1,"column_start":1,"column_end":98}},{"value":"/ a function that specifies if two elements are in the same group.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":98,"byte_end":166,"line_start":2,"line_end":2,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":167,"byte_end":170,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ # Example: Linear Searched Immutable Groups","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":171,"byte_end":218,"line_start":4,"line_end":4,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":219,"byte_end":222,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ You will only need to define a function that returns `true` if two elements are in the same group.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":223,"byte_end":325,"line_start":6,"line_end":6,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":326,"byte_end":329,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The `LinearGroupBy` iterator will always gives contiguous elements to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":330,"byte_end":427,"line_start":8,"line_end":8,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":428,"byte_end":431,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":432,"byte_end":443,"line_start":10,"line_end":10,"column_start":1,"column_end":12}},{"value":"/ use slice_group_by::GroupBy;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":444,"byte_end":476,"line_start":11,"line_end":11,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":477,"byte_end":480,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ let slice = &[1, 1, 1, 3, 3, 2, 2, 2];","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":481,"byte_end":523,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":524,"byte_end":527,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ let mut iter = slice.linear_group_by_key(|x| -x);","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":528,"byte_end":581,"line_start":15,"line_end":15,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":582,"byte_end":585,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(iter.next(), Some(&[1, 1, 1][..]));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":586,"byte_end":636,"line_start":17,"line_end":17,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(iter.next(), Some(&[3, 3][..]));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":637,"byte_end":684,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(iter.next(), Some(&[2, 2, 2][..]));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":685,"byte_end":735,"line_start":19,"line_end":19,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":736,"byte_end":770,"line_start":20,"line_end":20,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":771,"byte_end":778,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":779,"byte_end":782,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Example: Linear Searched Immutable Str Slices","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":783,"byte_end":834,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":835,"byte_end":838,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ You will only need to define a function that returns `true` if two `char` are in the same group.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":839,"byte_end":939,"line_start":25,"line_end":25,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":940,"byte_end":943,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The `LinearStrGroupBy` iterator will always gives contiguous `char` to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":944,"byte_end":1042,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1043,"byte_end":1046,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1047,"byte_end":1058,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ use slice_group_by::StrGroupBy;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1059,"byte_end":1094,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1095,"byte_end":1098,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let string = \"aaaabbbbb饰饰cccc\";","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1099,"byte_end":1138,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1139,"byte_end":1142,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut iter = string.linear_group_by(|a, b| a == b);","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1143,"byte_end":1200,"line_start":34,"line_end":34,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1201,"byte_end":1204,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(iter.next(), Some(\"aaaa\"));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1205,"byte_end":1247,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(\"bbbbb\"));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1248,"byte_end":1291,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(\"饰饰\"));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1292,"byte_end":1336,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(iter.next(), Some(\"cccc\"));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1337,"byte_end":1379,"line_start":39,"line_end":39,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1380,"byte_end":1414,"line_start":40,"line_end":40,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1415,"byte_end":1422,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1423,"byte_end":1426,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Example: Binary Searched Mutable Groups","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1427,"byte_end":1472,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1473,"byte_end":1476,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ It is also possible to get mutable non overlapping groups of a slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1477,"byte_end":1550,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1551,"byte_end":1554,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The `BinaryGroupBy/Mut` and `ExponentialGroupBy/Mut` iterators will not necessarily","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1555,"byte_end":1642,"line_start":47,"line_end":47,"column_start":1,"column_end":88}},{"value":"/ gives contiguous elements to the predicate function. The predicate function should implement","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1643,"byte_end":1739,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"/ an order consistent with the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1740,"byte_end":1797,"line_start":49,"line_end":49,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1798,"byte_end":1801,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1802,"byte_end":1813,"line_start":51,"line_end":51,"column_start":1,"column_end":12}},{"value":"/ use slice_group_by::GroupByMut;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1814,"byte_end":1849,"line_start":52,"line_end":52,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1850,"byte_end":1853,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ let slice = &mut [1, 1, 1, 2, 2, 2, 3, 3];","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1854,"byte_end":1900,"line_start":54,"line_end":54,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1901,"byte_end":1904,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ let mut iter = slice.binary_group_by_mut(|a, b| a == b);","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1905,"byte_end":1965,"line_start":56,"line_end":56,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1966,"byte_end":1969,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(iter.next(), Some(&mut [1, 1, 1][..]));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":1970,"byte_end":2024,"line_start":58,"line_end":58,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(iter.next(), Some(&mut [2, 2, 2][..]));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2025,"byte_end":2079,"line_start":59,"line_end":59,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(iter.next(), Some(&mut [3, 3][..]));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2080,"byte_end":2131,"line_start":60,"line_end":60,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2132,"byte_end":2166,"line_start":61,"line_end":61,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2167,"byte_end":2174,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2175,"byte_end":2178,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Example: Exponential Searched Mutable Groups starting from the End","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2179,"byte_end":2251,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2252,"byte_end":2255,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ It is also possible to get mutable non overlapping groups of a slice even starting from the end of it.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2256,"byte_end":2362,"line_start":66,"line_end":66,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2363,"byte_end":2366,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2367,"byte_end":2378,"line_start":68,"line_end":68,"column_start":1,"column_end":12}},{"value":"/ use slice_group_by::GroupByMut;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2379,"byte_end":2414,"line_start":69,"line_end":69,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2415,"byte_end":2418,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let slice = &mut [1, 1, 1, 2, 2, 2, 3, 3];","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2419,"byte_end":2465,"line_start":71,"line_end":71,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2466,"byte_end":2469,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ let mut iter = slice.exponential_group_by_mut(|a, b| a == b).rev();","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2470,"byte_end":2541,"line_start":73,"line_end":73,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2542,"byte_end":2545,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(iter.next(), Some(&mut [3, 3][..]));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2546,"byte_end":2597,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(iter.next(), Some(&mut [2, 2, 2][..]));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2598,"byte_end":2652,"line_start":76,"line_end":76,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(iter.next(), Some(&mut [1, 1, 1][..]));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2653,"byte_end":2707,"line_start":77,"line_end":77,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2708,"byte_end":2742,"line_start":78,"line_end":78,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2743,"byte_end":2750,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":2751,"byte_end":2754,"line_start":80,"line_end":80,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":9},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31491,"byte_end":31502,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"name":"LinearGroup","qualname":"::linear_group::linear_group::LinearGroup","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that will return non-overlapping groups of equal elements\n in the slice using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping groups of equal elements","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31126,"byte_end":31199,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ in the slice using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31200,"byte_end":31250,"line_start":4,"line_end":4,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31251,"byte_end":31254,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It will give two contiguous elements to the [`PartialEq::eq`] function","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31255,"byte_end":31329,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ therefore the slice must not be necessarily sorted.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31330,"byte_end":31385,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31386,"byte_end":31389,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31390,"byte_end":31479,"line_start":9,"line_end":9,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31626,"byte_end":31629,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearGroup>::new","value":"pub fn new(&'a [T]) -> LinearGroup","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":18},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":32166,"byte_end":32180,"line_start":29,"line_end":29,"column_start":12,"column_end":26},"name":"LinearGroupMut","qualname":"::linear_group::linear_group::LinearGroupMut","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that will return non-overlapping *mutable* groups of equal elements\n in the slice using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping *mutable* groups of equal elements","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31791,"byte_end":31874,"line_start":22,"line_end":22,"column_start":1,"column_end":84}},{"value":"/ in the slice using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31875,"byte_end":31925,"line_start":23,"line_end":23,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31926,"byte_end":31929,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ It will give two contiguous elements to the [`PartialEq::eq`] function","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31930,"byte_end":32004,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ therefore the slice must not be necessarily sorted.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":32005,"byte_end":32060,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":32061,"byte_end":32064,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":32065,"byte_end":32154,"line_start":28,"line_end":28,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":32310,"byte_end":32313,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearGroupMut>::new","value":"pub fn new(&'a mut [T]) -> LinearGroupMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":36},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37242,"byte_end":37255,"line_start":131,"line_end":131,"column_start":12,"column_end":25},"name":"LinearGroupBy","qualname":"::linear_group::linear_group_by::LinearGroupBy","value":"LinearGroupBy {  }","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43}],"decl_id":null,"docs":" An iterator that will return non-overlapping groups in the slice\n using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping groups in the slice","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":36997,"byte_end":37065,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/ using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37066,"byte_end":37103,"line_start":127,"line_end":127,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37104,"byte_end":37107,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ It will give two contiguous elements to the predicate function therefore the slice","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37108,"byte_end":37194,"line_start":129,"line_end":129,"column_start":1,"column_end":87}},{"value":"/ must not be necessarily sorted.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37195,"byte_end":37230,"line_start":130,"line_end":130,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37461,"byte_end":37464,"line_start":141,"line_end":141,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearGroupBy>::new","value":"pub fn new(&'a [T], P) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37861,"byte_end":37870,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"remainder","qualname":"<LinearGroupBy>::remainder","value":"pub fn remainder(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37748,"byte_end":37815,"line_start":152,"line_end":152,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37820,"byte_end":37849,"line_start":153,"line_end":153,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":59},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38555,"byte_end":38571,"line_start":175,"line_end":175,"column_start":12,"column_end":28},"name":"LinearGroupByMut","qualname":"::linear_group::linear_group_by::LinearGroupByMut","value":"LinearGroupByMut {  }","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"decl_id":null,"docs":" An iterator that will return non-overlapping *mutable* groups in the slice\n using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping *mutable* groups in the slice","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38300,"byte_end":38378,"line_start":170,"line_end":170,"column_start":1,"column_end":79}},{"value":"/ using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38379,"byte_end":38416,"line_start":171,"line_end":171,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38417,"byte_end":38420,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ It will give two contiguous elements to the predicate function therefore the slice","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38421,"byte_end":38507,"line_start":173,"line_end":173,"column_start":1,"column_end":87}},{"value":"/ must not be necessarily sorted.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38508,"byte_end":38543,"line_start":174,"line_end":174,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38780,"byte_end":38783,"line_start":185,"line_end":185,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearGroupByMut>::new","value":"pub fn new(&'a mut [T], P) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":39195,"byte_end":39209,"line_start":198,"line_end":198,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<LinearGroupByMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":39082,"byte_end":39149,"line_start":196,"line_end":196,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":39154,"byte_end":39183,"line_start":197,"line_end":197,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":91},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":44616,"byte_end":44632,"line_start":133,"line_end":133,"column_start":12,"column_end":28},"name":"LinearGroupByKey","qualname":"::linear_group::linear_group_by_key::LinearGroupByKey","value":"LinearGroupByKey {  }","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"decl_id":null,"docs":" An iterator that will return non-overlapping groups of equal elements\n in the slice using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping groups of equal elements","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":44361,"byte_end":44434,"line_start":128,"line_end":128,"column_start":1,"column_end":74}},{"value":"/ in the slice using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":44435,"byte_end":44485,"line_start":129,"line_end":129,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":44486,"byte_end":44489,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ It will give an element to the given function, producing a key and comparing","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":44490,"byte_end":44570,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/ the keys to determine groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":44571,"byte_end":44604,"line_start":132,"line_end":132,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":44800,"byte_end":44803,"line_start":141,"line_end":141,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearGroupByKey>::new","value":"pub fn new(&'a [T], F) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45205,"byte_end":45214,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"remainder","qualname":"<LinearGroupByKey>::remainder","value":"pub fn remainder(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45092,"byte_end":45159,"line_start":152,"line_end":152,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45164,"byte_end":45193,"line_start":153,"line_end":153,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":114},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45905,"byte_end":45924,"line_start":176,"line_end":176,"column_start":12,"column_end":31},"name":"LinearGroupByKeyMut","qualname":"::linear_group::linear_group_by_key::LinearGroupByKeyMut","value":"LinearGroupByKeyMut {  }","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121}],"decl_id":null,"docs":" An iterator that will return non-overlapping *mutable* groups in the slice\n using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping *mutable* groups in the slice","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45658,"byte_end":45736,"line_start":171,"line_end":171,"column_start":1,"column_end":79}},{"value":"/ using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45737,"byte_end":45774,"line_start":172,"line_end":172,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45775,"byte_end":45778,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ It will give an element to the given function, producing a key and comparing","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45779,"byte_end":45859,"line_start":174,"line_end":174,"column_start":1,"column_end":81}},{"value":"/ the keys to determine groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45860,"byte_end":45893,"line_start":175,"line_end":175,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":46095,"byte_end":46098,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearGroupByKeyMut>::new","value":"pub fn new(&'a mut [T], F) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":46518,"byte_end":46532,"line_start":197,"line_end":197,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<LinearGroupByKeyMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":46405,"byte_end":46472,"line_start":195,"line_end":195,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":46477,"byte_end":46506,"line_start":196,"line_end":196,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":151},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55152,"byte_end":55163,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"name":"BinaryGroup","qualname":"::binary_group::binary_group::BinaryGroup","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that will return non-overlapping groups of equal elements, according to\n the [`PartialEq::eq`] function in the slice using *binary search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping groups of equal elements, according to","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":54705,"byte_end":54792,"line_start":3,"line_end":3,"column_start":1,"column_end":88}},{"value":"/ the [`PartialEq::eq`] function in the slice using *binary search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":54793,"byte_end":54863,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":54864,"byte_end":54867,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It will not necessarily gives contiguous elements to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":54868,"byte_end":54948,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"/ The predicate function should implement an order consistent with the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":54949,"byte_end":55046,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55047,"byte_end":55050,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55051,"byte_end":55140,"line_start":9,"line_end":9,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55287,"byte_end":55290,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryGroup>::new","value":"pub fn new(&'a [T]) -> BinaryGroup","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":160},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55909,"byte_end":55923,"line_start":29,"line_end":29,"column_start":12,"column_end":26},"name":"BinaryGroupMut","qualname":"::binary_group::binary_group::BinaryGroupMut","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that will return non-overlapping *mutable* groups of equal elements, according to\n the [`PartialEq::eq`] function in the slice using *binary search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping *mutable* groups of equal elements, according to","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55452,"byte_end":55549,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/ the [`PartialEq::eq`] function in the slice using *binary search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55550,"byte_end":55620,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55621,"byte_end":55624,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ It will not necessarily gives contiguous elements to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55625,"byte_end":55705,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ The predicate function should implement an order consistent with the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55706,"byte_end":55803,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55804,"byte_end":55807,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55808,"byte_end":55897,"line_start":28,"line_end":28,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":56053,"byte_end":56056,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryGroupMut>::new","value":"pub fn new(&'a mut [T]) -> BinaryGroupMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":181},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59146,"byte_end":59159,"line_start":87,"line_end":87,"column_start":12,"column_end":25},"name":"BinaryGroupBy","qualname":"::binary_group::binary_group_by::BinaryGroupBy","value":"BinaryGroupBy {  }","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188}],"decl_id":null,"docs":" An iterator that will return non-overlapping groups in the slice using *binary search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping groups in the slice using *binary search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":58860,"byte_end":58951,"line_start":83,"line_end":83,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":58952,"byte_end":58955,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ It will not necessarily gives contiguous elements to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":58956,"byte_end":59036,"line_start":85,"line_end":85,"column_start":1,"column_end":81}},{"value":"/ The predicate function should implement an order consistent with the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59037,"byte_end":59134,"line_start":86,"line_end":86,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59329,"byte_end":59332,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryGroupBy>::new","value":"pub fn new(&'a [T], P) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59738,"byte_end":59747,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"remainder","qualname":"<BinaryGroupBy>::remainder","value":"pub fn remainder(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59625,"byte_end":59692,"line_start":106,"line_end":106,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59697,"byte_end":59726,"line_start":107,"line_end":107,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":204},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60484,"byte_end":60500,"line_start":129,"line_end":129,"column_start":12,"column_end":28},"name":"BinaryGroupByMut","qualname":"::binary_group::binary_group_by::BinaryGroupByMut","value":"BinaryGroupByMut {  }","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211}],"decl_id":null,"docs":" An iterator that will return non-overlapping *mutable* groups\n in the slice using *binary search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping *mutable* groups","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60184,"byte_end":60249,"line_start":124,"line_end":124,"column_start":1,"column_end":66}},{"value":"/ in the slice using *binary search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60250,"byte_end":60289,"line_start":125,"line_end":125,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60290,"byte_end":60293,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ It will not necessarily gives contiguous elements to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60294,"byte_end":60374,"line_start":127,"line_end":127,"column_start":1,"column_end":81}},{"value":"/ The predicate function should implement an order consistent with the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60375,"byte_end":60472,"line_start":128,"line_end":128,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60705,"byte_end":60708,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryGroupByMut>::new","value":"pub fn new(&'a mut [T], P) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":61132,"byte_end":61146,"line_start":152,"line_end":152,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<BinaryGroupByMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":61019,"byte_end":61086,"line_start":150,"line_end":150,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":61091,"byte_end":61120,"line_start":151,"line_end":151,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":239},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":64650,"byte_end":64666,"line_start":90,"line_end":90,"column_start":12,"column_end":28},"name":"BinaryGroupByKey","qualname":"::binary_group::binary_group_by_key::BinaryGroupByKey","value":"BinaryGroupByKey {  }","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246}],"decl_id":null,"docs":" An iterator that will return non-overlapping groups in the slice using *binary search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping groups in the slice using *binary search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":64428,"byte_end":64519,"line_start":86,"line_end":86,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":64520,"byte_end":64523,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ It will give an element to the given function, producing a key and comparing","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":64524,"byte_end":64604,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the keys to determine groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":64605,"byte_end":64638,"line_start":89,"line_end":89,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":64834,"byte_end":64837,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryGroupByKey>::new","value":"pub fn new(&'a [T], F) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65235,"byte_end":65244,"line_start":111,"line_end":111,"column_start":12,"column_end":21},"name":"remainder","qualname":"<BinaryGroupByKey>::remainder","value":"pub fn remainder(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65122,"byte_end":65189,"line_start":109,"line_end":109,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65194,"byte_end":65223,"line_start":110,"line_end":110,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":262},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65930,"byte_end":65949,"line_start":132,"line_end":132,"column_start":12,"column_end":31},"name":"BinaryGroupByKeyMut","qualname":"::binary_group::binary_group_by_key::BinaryGroupByKeyMut","value":"BinaryGroupByKeyMut {  }","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269}],"decl_id":null,"docs":" An iterator that will return non-overlapping *mutable* groups\n in the slice using *binary search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping *mutable* groups","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65694,"byte_end":65759,"line_start":127,"line_end":127,"column_start":1,"column_end":66}},{"value":"/ in the slice using *binary search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65760,"byte_end":65799,"line_start":128,"line_end":128,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65800,"byte_end":65803,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ It will give an element to the given function, producing a key and comparing","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65804,"byte_end":65884,"line_start":130,"line_end":130,"column_start":1,"column_end":81}},{"value":"/ the keys to determine groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65885,"byte_end":65918,"line_start":131,"line_end":131,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":66120,"byte_end":66123,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryGroupByKeyMut>::new","value":"pub fn new(&'a mut [T], F) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":66539,"byte_end":66548,"line_start":153,"line_end":153,"column_start":12,"column_end":21},"name":"remainder","qualname":"<BinaryGroupByKeyMut>::remainder","value":"pub fn remainder(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":66426,"byte_end":66493,"line_start":151,"line_end":151,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":66498,"byte_end":66527,"line_start":152,"line_end":152,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":299},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75245,"byte_end":75261,"line_start":10,"line_end":10,"column_start":12,"column_end":28},"name":"ExponentialGroup","qualname":"::exponential_group::exponential_group::ExponentialGroup","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that will return non-overlapping groups of equal elements, according to\n the [`PartialEq::eq`] function in the slice using *exponential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping groups of equal elements, according to","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":74793,"byte_end":74880,"line_start":3,"line_end":3,"column_start":1,"column_end":88}},{"value":"/ the [`PartialEq::eq`] function in the slice using *exponential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":74881,"byte_end":74956,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":74957,"byte_end":74960,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It will not necessarily gives contiguous elements to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":74961,"byte_end":75041,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"/ The predicate function should implement an order consistent with the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75042,"byte_end":75139,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75140,"byte_end":75143,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75144,"byte_end":75233,"line_start":9,"line_end":9,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75395,"byte_end":75398,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<ExponentialGroup>::new","value":"pub fn new(&'a [T]) -> ExponentialGroup","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":308},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":76042,"byte_end":76061,"line_start":29,"line_end":29,"column_start":12,"column_end":31},"name":"ExponentialGroupMut","qualname":"::exponential_group::exponential_group::ExponentialGroupMut","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that will return non-overlapping *mutable* groups of equal elements, according to\n the [`PartialEq::eq`] function in the slice using *exponential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping *mutable* groups of equal elements, according to","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75580,"byte_end":75677,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/ the [`PartialEq::eq`] function in the slice using *exponential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75678,"byte_end":75753,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75754,"byte_end":75757,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ It will not necessarily gives contiguous elements to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75758,"byte_end":75838,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ The predicate function should implement an order consistent with the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75839,"byte_end":75936,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75937,"byte_end":75940,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75941,"byte_end":76030,"line_start":28,"line_end":28,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":76201,"byte_end":76204,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<ExponentialGroupMut>::new","value":"pub fn new(&'a mut [T]) -> ExponentialGroupMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":331},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79317,"byte_end":79335,"line_start":85,"line_end":85,"column_start":12,"column_end":30},"name":"ExponentialGroupBy","qualname":"::exponential_group::exponential_group_by::ExponentialGroupBy","value":"ExponentialGroupBy {  }","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338}],"decl_id":null,"docs":" An iterator that will reutrn non-overlapping groups in the slice using *exponential search*.","sig":null,"attributes":[{"value":"/ An iterator that will reutrn non-overlapping groups in the slice using *exponential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79026,"byte_end":79122,"line_start":81,"line_end":81,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79123,"byte_end":79126,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ It will not necessarily gives contiguous elements to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79127,"byte_end":79207,"line_start":83,"line_end":83,"column_start":1,"column_end":81}},{"value":"/ The predicate function should implement an order consistent with the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79208,"byte_end":79305,"line_start":84,"line_end":84,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79542,"byte_end":79545,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<ExponentialGroupBy>::new","value":"pub fn new(&'a [T], P) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79961,"byte_end":79970,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"remainder","qualname":"<ExponentialGroupBy>::remainder","value":"pub fn remainder(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79848,"byte_end":79915,"line_start":106,"line_end":106,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79920,"byte_end":79949,"line_start":107,"line_end":107,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":354},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80732,"byte_end":80753,"line_start":129,"line_end":129,"column_start":12,"column_end":33},"name":"ExponentialGroupByMut","qualname":"::exponential_group::exponential_group_by::ExponentialGroupByMut","value":"ExponentialGroupByMut {  }","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361}],"decl_id":null,"docs":" An iterator that will reutrn non-overlapping *mutable* groups\n in the slice using *exponential search*.","sig":null,"attributes":[{"value":"/ An iterator that will reutrn non-overlapping *mutable* groups","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80427,"byte_end":80492,"line_start":124,"line_end":124,"column_start":1,"column_end":66}},{"value":"/ in the slice using *exponential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80493,"byte_end":80537,"line_start":125,"line_end":125,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80538,"byte_end":80541,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ It will not necessarily gives contiguous elements to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80542,"byte_end":80622,"line_start":127,"line_end":127,"column_start":1,"column_end":81}},{"value":"/ The predicate function should implement an order consistent with the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80623,"byte_end":80720,"line_start":128,"line_end":128,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80963,"byte_end":80966,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"new","qualname":"<ExponentialGroupByMut>::new","value":"pub fn new(&'a mut [T], P) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":81400,"byte_end":81414,"line_start":152,"line_end":152,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<ExponentialGroupByMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":81287,"byte_end":81354,"line_start":150,"line_end":150,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":81359,"byte_end":81388,"line_start":151,"line_end":151,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":391},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":84938,"byte_end":84959,"line_start":88,"line_end":88,"column_start":12,"column_end":33},"name":"ExponentialGroupByKey","qualname":"::exponential_group::exponential_group_by_key::ExponentialGroupByKey","value":"ExponentialGroupByKey {  }","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"decl_id":null,"docs":" An iterator that will reutrn non-overlapping groups in the slice using *exponential search*.","sig":null,"attributes":[{"value":"/ An iterator that will reutrn non-overlapping groups in the slice using *exponential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":84711,"byte_end":84807,"line_start":84,"line_end":84,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":84808,"byte_end":84811,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ It will give an element to the given function, producing a key and comparing","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":84812,"byte_end":84892,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/ the keys to determine groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":84893,"byte_end":84926,"line_start":87,"line_end":87,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":85132,"byte_end":85135,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<ExponentialGroupByKey>::new","value":"pub fn new(&'a [T], F) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":85547,"byte_end":85556,"line_start":109,"line_end":109,"column_start":12,"column_end":21},"name":"remainder","qualname":"<ExponentialGroupByKey>::remainder","value":"pub fn remainder(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":85434,"byte_end":85501,"line_start":107,"line_end":107,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":85506,"byte_end":85535,"line_start":108,"line_end":108,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":414},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86267,"byte_end":86291,"line_start":130,"line_end":130,"column_start":12,"column_end":36},"name":"ExponentialGroupByKeyMut","qualname":"::exponential_group::exponential_group_by_key::ExponentialGroupByKeyMut","value":"ExponentialGroupByKeyMut {  }","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421}],"decl_id":null,"docs":" An iterator that will reutrn non-overlapping *mutable* groups\n in the slice using *exponential search*.","sig":null,"attributes":[{"value":"/ An iterator that will reutrn non-overlapping *mutable* groups","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86026,"byte_end":86091,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ in the slice using *exponential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86092,"byte_end":86136,"line_start":126,"line_end":126,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86137,"byte_end":86140,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ It will give an element to the given function, producing a key and comparing","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86141,"byte_end":86221,"line_start":128,"line_end":128,"column_start":1,"column_end":81}},{"value":"/ the keys to determine groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86222,"byte_end":86255,"line_start":129,"line_end":129,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86467,"byte_end":86470,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"new","qualname":"<ExponentialGroupByKeyMut>::new","value":"pub fn new(&'a mut [T], F) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86900,"byte_end":86914,"line_start":151,"line_end":151,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<ExponentialGroupByKeyMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is going to be\n returned by the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is going to be","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86787,"byte_end":86854,"line_start":149,"line_end":149,"column_start":5,"column_end":72}},{"value":"/ returned by the iterator.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86859,"byte_end":86888,"line_start":150,"line_end":150,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":452},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93206,"byte_end":93220,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"LinearStrGroup","qualname":"::linear_str_group::linear_str_group::LinearStrGroup","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that will return non-overlapping groups of equal `char`\n in the `str` using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping groups of equal `char`","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":92911,"byte_end":92982,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ in the `str` using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":92983,"byte_end":93033,"line_start":4,"line_end":4,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93034,"byte_end":93037,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It will use the `char` [`PartialEq::eq`] function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93038,"byte_end":93092,"line_start":6,"line_end":6,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93093,"byte_end":93096,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/primitive.char.html#impl-PartialEq%3Cchar%3E","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93097,"byte_end":93194,"line_start":8,"line_end":8,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93314,"byte_end":93317,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearStrGroup>::new","value":"pub fn new(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":460},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93785,"byte_end":93802,"line_start":25,"line_end":25,"column_start":12,"column_end":29},"name":"LinearStrGroupMut","qualname":"::linear_str_group::linear_str_group::LinearStrGroupMut","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that will return non-overlapping *mutable* groups of equal `char`\n in the `str` using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping *mutable* groups of equal `char`","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93480,"byte_end":93561,"line_start":19,"line_end":19,"column_start":1,"column_end":82}},{"value":"/ in the `str` using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93562,"byte_end":93612,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93613,"byte_end":93616,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ It will use the `char` [`PartialEq::eq`] function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93617,"byte_end":93671,"line_start":22,"line_end":22,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93672,"byte_end":93675,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/primitive.char.html#impl-PartialEq%3Cchar%3E","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93676,"byte_end":93773,"line_start":24,"line_end":24,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93902,"byte_end":93905,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearStrGroupMut>::new","value":"pub fn new(&'a mut str) -> LinearStrGroupMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":94057,"byte_end":94067,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"as_str_mut","qualname":"<LinearStrGroupMut>::as_str_mut","value":"pub fn as_str_mut(&mut Self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":94036,"byte_end":94045,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":477},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97260,"byte_end":97276,"line_start":93,"line_end":93,"column_start":12,"column_end":28},"name":"LinearStrGroupBy","qualname":"::linear_str_group::linear_str_group_by::LinearStrGroupBy","value":"LinearStrGroupBy {  }","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481}],"decl_id":null,"docs":" An iterator that will return non-overlapping groups in the `str`\n using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping groups in the `str`","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97072,"byte_end":97140,"line_start":89,"line_end":89,"column_start":1,"column_end":69}},{"value":"/ using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97141,"byte_end":97178,"line_start":90,"line_end":90,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97179,"byte_end":97182,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ It will give two contiguous `char` to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97183,"byte_end":97248,"line_start":92,"line_end":92,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97376,"byte_end":97379,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearStrGroupBy>::new","value":"pub fn new(&'a str, P) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":486},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97753,"byte_end":97772,"line_start":110,"line_end":110,"column_start":12,"column_end":31},"name":"LinearStrGroupByMut","qualname":"::linear_str_group::linear_str_group_by::LinearStrGroupByMut","value":"LinearStrGroupByMut {  }","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490}],"decl_id":null,"docs":" An iterator that will return non-overlapping *mutable* groups in the `str`\n using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping *mutable* groups in the `str`","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97555,"byte_end":97633,"line_start":106,"line_end":106,"column_start":1,"column_end":79}},{"value":"/ using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97634,"byte_end":97671,"line_start":107,"line_end":107,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97672,"byte_end":97675,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ It will give two contiguous `char` to the predicate function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97676,"byte_end":97741,"line_start":109,"line_end":109,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97879,"byte_end":97882,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearStrGroupByMut>::new","value":"pub fn new(&'a mut str, P) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":98002,"byte_end":98012,"line_start":121,"line_end":121,"column_start":12,"column_end":22},"name":"as_str_mut","qualname":"<LinearStrGroupByMut>::as_str_mut","value":"pub fn as_str_mut(&mut Self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97981,"byte_end":97990,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":504},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101372,"byte_end":101391,"line_start":97,"line_end":97,"column_start":12,"column_end":31},"name":"LinearStrGroupByKey","qualname":"::linear_str_group::linear_str_group_by_key::LinearStrGroupByKey","value":"LinearStrGroupByKey {  }","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508}],"decl_id":null,"docs":" An iterator that will return non-overlapping groups in the `str`\n using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping groups in the `str`","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101135,"byte_end":101203,"line_start":92,"line_end":92,"column_start":1,"column_end":69}},{"value":"/ using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101204,"byte_end":101241,"line_start":93,"line_end":93,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101242,"byte_end":101245,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ It will give an element to the given function, producing a key and comparing","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101246,"byte_end":101326,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/ the keys to determine groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101327,"byte_end":101360,"line_start":96,"line_end":96,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101489,"byte_end":101492,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearStrGroupByKey>::new","value":"pub fn new(&'a str, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":513},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101912,"byte_end":101934,"line_start":115,"line_end":115,"column_start":12,"column_end":34},"name":"LinearStrGroupByKeyMut","qualname":"::linear_str_group::linear_str_group_by_key::LinearStrGroupByKeyMut","value":"LinearStrGroupByKeyMut {  }","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517}],"decl_id":null,"docs":" An iterator that will return non-overlapping *mutable* groups in the `str`\n using *linear/sequential search*.","sig":null,"attributes":[{"value":"/ An iterator that will return non-overlapping *mutable* groups in the `str`","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101665,"byte_end":101743,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/ using *linear/sequential search*.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101744,"byte_end":101781,"line_start":111,"line_end":111,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101782,"byte_end":101785,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ It will give an element to the given function, producing a key and comparing","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101786,"byte_end":101866,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/ the keys to determine groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101867,"byte_end":101900,"line_start":114,"line_end":114,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":102039,"byte_end":102042,"line_start":121,"line_end":121,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearStrGroupByKeyMut>::new","value":"pub fn new(&'a mut str, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":102152,"byte_end":102162,"line_start":126,"line_end":126,"column_start":12,"column_end":22},"name":"as_str_mut","qualname":"<LinearStrGroupByKeyMut>::as_str_mut","value":"pub fn as_str_mut(&mut Self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":102131,"byte_end":102140,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":572},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6208,"byte_end":6226,"line_start":215,"line_end":215,"column_start":8,"column_end":26},"name":"exponential_search","qualname":"::exponential_search","value":"pub fn exponential_search<T>(&[T], &T) -> Result<usize, usize> where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Exponential searches this sorted slice for a given element.","sig":null,"attributes":[{"value":"/ Exponential searches this sorted slice for a given element.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5276,"byte_end":5339,"line_start":191,"line_end":191,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5340,"byte_end":5343,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ If the value is found then `Ok` is returned, containing the index of the matching element;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5344,"byte_end":5438,"line_start":193,"line_end":193,"column_start":1,"column_end":95}},{"value":"/ if the value is not found then `Err` is returned, containing the index where a matching element","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5439,"byte_end":5538,"line_start":194,"line_end":194,"column_start":1,"column_end":100}},{"value":"/ could be inserted while maintaining sorted order.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5539,"byte_end":5592,"line_start":195,"line_end":195,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5593,"byte_end":5596,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5597,"byte_end":5611,"line_start":197,"line_end":197,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5612,"byte_end":5615,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ Looks up a series of four elements. The first is found, with a","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5616,"byte_end":5682,"line_start":199,"line_end":199,"column_start":1,"column_end":67}},{"value":"/ uniquely determined position; the second and third are not","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5683,"byte_end":5745,"line_start":200,"line_end":200,"column_start":1,"column_end":63}},{"value":"/ found; the fourth could match any position in `[1, 4]`.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5746,"byte_end":5805,"line_start":201,"line_end":201,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5806,"byte_end":5809,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5810,"byte_end":5817,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"/ use slice_group_by::exponential_search;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5818,"byte_end":5861,"line_start":204,"line_end":204,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5862,"byte_end":5865,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ let s = &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5866,"byte_end":5923,"line_start":206,"line_end":206,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5924,"byte_end":5927,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(exponential_search(s, &13),  Ok(9));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5928,"byte_end":5979,"line_start":208,"line_end":208,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(exponential_search(s, &4),   Err(7));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":5980,"byte_end":6032,"line_start":209,"line_end":209,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(exponential_search(s, &100), Err(13));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6033,"byte_end":6086,"line_start":210,"line_end":210,"column_start":1,"column_end":54}},{"value":"/ let r = exponential_search(s, &1);","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6087,"byte_end":6125,"line_start":211,"line_end":211,"column_start":1,"column_end":39}},{"value":"/ assert!(match r { Ok(1..=4) => true, _ => false, });","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6126,"byte_end":6182,"line_start":212,"line_end":212,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6183,"byte_end":6190,"line_start":213,"line_end":213,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6191,"byte_end":6200,"line_start":214,"line_end":214,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":575},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7685,"byte_end":7706,"line_start":253,"line_end":253,"column_start":8,"column_end":29},"name":"exponential_search_by","qualname":"::exponential_search_by","value":"pub fn exponential_search_by<T, F>(&[T], F) -> Result<usize, usize> where\nF: FnMut(&T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Binary searches this sorted slice with a comparator function.","sig":null,"attributes":[{"value":"/ Binary searches this sorted slice with a comparator function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6345,"byte_end":6410,"line_start":221,"line_end":221,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6411,"byte_end":6414,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ The comparator function should implement an order consistent with the sort order of","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6415,"byte_end":6502,"line_start":223,"line_end":223,"column_start":1,"column_end":88}},{"value":"/ the underlying slice, returning an order code that indicates whether its argument","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6503,"byte_end":6588,"line_start":224,"line_end":224,"column_start":1,"column_end":86}},{"value":"/ is `Less`, `Equal` or `Greater` the desired target.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6589,"byte_end":6644,"line_start":225,"line_end":225,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6645,"byte_end":6648,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ If the value is found then `Ok` is returned, containing the index of the matching element;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6649,"byte_end":6743,"line_start":227,"line_end":227,"column_start":1,"column_end":95}},{"value":"/ if the value is not found then `Err` is returned, containing the index where a matching element","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6744,"byte_end":6843,"line_start":228,"line_end":228,"column_start":1,"column_end":100}},{"value":"/ could be inserted while maintaining sorted order.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6844,"byte_end":6897,"line_start":229,"line_end":229,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6898,"byte_end":6901,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6902,"byte_end":6916,"line_start":231,"line_end":231,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6917,"byte_end":6920,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ Looks up a series of four elements. The first is found, with a","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6921,"byte_end":6987,"line_start":233,"line_end":233,"column_start":1,"column_end":67}},{"value":"/ uniquely determined position; the second and third are not","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":6988,"byte_end":7050,"line_start":234,"line_end":234,"column_start":1,"column_end":63}},{"value":"/ found; the fourth could match any position in `[1, 4]`.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7051,"byte_end":7110,"line_start":235,"line_end":235,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7111,"byte_end":7114,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7115,"byte_end":7122,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/ use slice_group_by::exponential_search_by;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7123,"byte_end":7169,"line_start":238,"line_end":238,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7170,"byte_end":7173,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ let s = &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7174,"byte_end":7231,"line_start":240,"line_end":240,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7232,"byte_end":7235,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ let seek = 13;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7236,"byte_end":7254,"line_start":242,"line_end":242,"column_start":1,"column_end":19}},{"value":"/ assert_eq!(exponential_search_by(s, |probe| probe.cmp(&seek)), Ok(9));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7255,"byte_end":7329,"line_start":243,"line_end":243,"column_start":1,"column_end":75}},{"value":"/ let seek = 4;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7330,"byte_end":7347,"line_start":244,"line_end":244,"column_start":1,"column_end":18}},{"value":"/ assert_eq!(exponential_search_by(s, |probe| probe.cmp(&seek)), Err(7));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7348,"byte_end":7423,"line_start":245,"line_end":245,"column_start":1,"column_end":76}},{"value":"/ let seek = 100;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7424,"byte_end":7443,"line_start":246,"line_end":246,"column_start":1,"column_end":20}},{"value":"/ assert_eq!(exponential_search_by(s, |probe| probe.cmp(&seek)), Err(13));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7444,"byte_end":7520,"line_start":247,"line_end":247,"column_start":1,"column_end":77}},{"value":"/ let seek = 1;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7521,"byte_end":7538,"line_start":248,"line_end":248,"column_start":1,"column_end":18}},{"value":"/ let r = exponential_search_by(s, |probe| probe.cmp(&seek));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7539,"byte_end":7602,"line_start":249,"line_end":249,"column_start":1,"column_end":64}},{"value":"/ assert!(match r { Ok(1..=4) => true, _ => false, });","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7603,"byte_end":7659,"line_start":250,"line_end":250,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7660,"byte_end":7667,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":7668,"byte_end":7677,"line_start":252,"line_end":252,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":578},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9314,"byte_end":9339,"line_start":298,"line_end":298,"column_start":8,"column_end":33},"name":"exponential_search_by_key","qualname":"::exponential_search_by_key","value":"pub fn exponential_search_by_key<T, B, F>(&[T], &B, F) -> Result<usize, usize>\nwhere F: FnMut(&T) -> B, B: Ord","parent":null,"children":[],"decl_id":null,"docs":" Binary searches this sorted slice with a key extraction function.","sig":null,"attributes":[{"value":"/ Binary searches this sorted slice with a key extraction function.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8147,"byte_end":8216,"line_start":270,"line_end":270,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8217,"byte_end":8220,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ Assumes that the slice is sorted by the key.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8221,"byte_end":8269,"line_start":272,"line_end":272,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8270,"byte_end":8273,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ If the value is found then `Ok` is returned, containing the index of the matching element;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8274,"byte_end":8368,"line_start":274,"line_end":274,"column_start":1,"column_end":95}},{"value":"/ if the value is not found then `Err` is returned, containing the index where a matching element","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8369,"byte_end":8468,"line_start":275,"line_end":275,"column_start":1,"column_end":100}},{"value":"/ could be inserted while maintaining sorted order.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8469,"byte_end":8522,"line_start":276,"line_end":276,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8523,"byte_end":8526,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8527,"byte_end":8541,"line_start":278,"line_end":278,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8542,"byte_end":8545,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ Looks up a series of four elements. The first is found, with a","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8546,"byte_end":8612,"line_start":280,"line_end":280,"column_start":1,"column_end":67}},{"value":"/ uniquely determined position; the second and third are not","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8613,"byte_end":8675,"line_start":281,"line_end":281,"column_start":1,"column_end":63}},{"value":"/ found; the fourth could match any position in `[1, 4]`.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8676,"byte_end":8735,"line_start":282,"line_end":282,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8736,"byte_end":8739,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8740,"byte_end":8747,"line_start":284,"line_end":284,"column_start":1,"column_end":8}},{"value":"/ use slice_group_by::exponential_search_by_key;","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8748,"byte_end":8798,"line_start":285,"line_end":285,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8799,"byte_end":8802,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ let s = &[(0, 0), (2, 1), (4, 1), (5, 1), (3, 1),","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8803,"byte_end":8856,"line_start":287,"line_end":287,"column_start":1,"column_end":54}},{"value":"/           (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8857,"byte_end":8911,"line_start":288,"line_end":288,"column_start":1,"column_end":55}},{"value":"/           (1, 21), (2, 34), (4, 55)];","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8912,"byte_end":8953,"line_start":289,"line_end":289,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8954,"byte_end":8957,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(exponential_search_by_key(s, &13, |&(a,b)| b),  Ok(9));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":8958,"byte_end":9028,"line_start":291,"line_end":291,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(exponential_search_by_key(s, &4, |&(a,b)| b),   Err(7));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9029,"byte_end":9100,"line_start":292,"line_end":292,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(exponential_search_by_key(s, &100, |&(a,b)| b), Err(13));","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9101,"byte_end":9173,"line_start":293,"line_end":293,"column_start":1,"column_end":73}},{"value":"/ let r = exponential_search_by_key(s, &1, |&(a,b)| b);","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9174,"byte_end":9231,"line_start":294,"line_end":294,"column_start":1,"column_end":58}},{"value":"/ assert!(match r { Ok(1..=4) => true, _ => false, });","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9232,"byte_end":9288,"line_start":295,"line_end":295,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9289,"byte_end":9296,"line_start":296,"line_end":296,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9297,"byte_end":9306,"line_start":297,"line_end":297,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":583},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9615,"byte_end":9622,"line_start":307,"line_end":307,"column_start":11,"column_end":18},"name":"GroupBy","qualname":"::GroupBy","value":"GroupBy<T>","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":602}],"decl_id":null,"docs":" A convenient trait to construct an iterator returning non-overlapping groups\n defined by a predicate.\n","sig":null,"attributes":[{"value":"/ A convenient trait to construct an iterator returning non-overlapping groups","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9496,"byte_end":9576,"line_start":305,"line_end":305,"column_start":1,"column_end":81}},{"value":"/ defined by a predicate.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9577,"byte_end":9604,"line_start":306,"line_end":306,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9827,"byte_end":9846,"line_start":311,"line_end":311,"column_start":8,"column_end":27},"name":"linear_group_by_key","qualname":"::GroupBy::linear_group_by_key","value":"pub fn linear_group_by_key<F, K>(&Self, F) -> LinearGroupByKey<, T, F> where\nF: FnMut(&T) -> K, K: PartialEq","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Returns an iterator on slice groups based that will use the given function to generate keys\n and determine groups based on them. It uses *linear search* to iterate over groups.\n","sig":null,"attributes":[{"value":"/ Returns an iterator on slice groups based that will use the given function to generate keys","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9632,"byte_end":9727,"line_start":309,"line_end":309,"column_start":5,"column_end":100}},{"value":"/ and determine groups based on them. It uses *linear search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9732,"byte_end":9819,"line_start":310,"line_end":310,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10034,"byte_end":10049,"line_start":316,"line_end":316,"column_start":8,"column_end":23},"name":"linear_group_by","qualname":"::GroupBy::linear_group_by","value":"pub fn linear_group_by<P>(&Self, P) -> LinearGroupBy<, T, P> where\nP: FnMut(&T, &T) -> bool","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Returns an iterator on slice groups using the *linear search* method.\n","sig":null,"attributes":[{"value":"/ Returns an iterator on slice groups using the *linear search* method.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":9953,"byte_end":10026,"line_start":315,"line_end":315,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10389,"byte_end":10401,"line_start":323,"line_end":323,"column_start":8,"column_end":20},"name":"linear_group","qualname":"::GroupBy::linear_group","value":"pub fn linear_group(&Self) -> LinearGroup<, T> where T: PartialEq","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Returns an iterator on slice groups based on the [`PartialEq::eq`] method of `T`,\n it uses *linear search* to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on slice groups based on the [`PartialEq::eq`] method of `T`,","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10138,"byte_end":10223,"line_start":319,"line_end":319,"column_start":5,"column_end":90}},{"value":"/ it uses *linear search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10228,"byte_end":10279,"line_start":320,"line_end":320,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10284,"byte_end":10287,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10292,"byte_end":10381,"line_start":322,"line_end":322,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10769,"byte_end":10788,"line_start":331,"line_end":331,"column_start":8,"column_end":27},"name":"binary_group_by_key","qualname":"::GroupBy::binary_group_by_key","value":"pub fn binary_group_by_key<F, K>(&Self, F) -> BinaryGroupByKey<, T, F> where\nF: FnMut(&T) -> K, K: PartialEq","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Returns an iterator on slice groups based that will use the given function to generate keys\n and determine groups based on them. It uses *binary search* to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on slice groups based that will use the given function to generate keys","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10456,"byte_end":10551,"line_start":326,"line_end":326,"column_start":5,"column_end":100}},{"value":"/ and determine groups based on them. It uses *binary search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10556,"byte_end":10643,"line_start":327,"line_end":327,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10648,"byte_end":10651,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10656,"byte_end":10724,"line_start":329,"line_end":329,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10729,"byte_end":10761,"line_start":330,"line_end":330,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11094,"byte_end":11109,"line_start":339,"line_end":339,"column_start":8,"column_end":23},"name":"binary_group_by","qualname":"::GroupBy::binary_group_by","value":"pub fn binary_group_by<P>(&Self, P) -> BinaryGroupBy<, T, P> where\nP: FnMut(&T, &T) -> bool","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Returns an iterator on slice groups using the *binary search* method.","sig":null,"attributes":[{"value":"/ Returns an iterator on slice groups using the *binary search* method.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10895,"byte_end":10968,"line_start":335,"line_end":335,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10973,"byte_end":10976,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":10981,"byte_end":11049,"line_start":337,"line_end":337,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11054,"byte_end":11086,"line_start":338,"line_end":338,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11567,"byte_end":11579,"line_start":349,"line_end":349,"column_start":8,"column_end":20},"name":"binary_group","qualname":"::GroupBy::binary_group","value":"pub fn binary_group(&Self) -> BinaryGroup<, T> where T: PartialEq","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Returns an iterator on slice groups based on the [`PartialEq::eq`] method of `T`,\n it uses *binary search* to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on slice groups based on the [`PartialEq::eq`] method of `T`,","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11198,"byte_end":11283,"line_start":342,"line_end":342,"column_start":5,"column_end":90}},{"value":"/ it uses *binary search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11288,"byte_end":11339,"line_start":343,"line_end":343,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11344,"byte_end":11347,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11352,"byte_end":11420,"line_start":345,"line_end":345,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11425,"byte_end":11457,"line_start":346,"line_end":346,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11462,"byte_end":11465,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11470,"byte_end":11559,"line_start":348,"line_end":348,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11952,"byte_end":11976,"line_start":357,"line_end":357,"column_start":8,"column_end":32},"name":"exponential_group_by_key","qualname":"::GroupBy::exponential_group_by_key","value":"pub fn exponential_group_by_key<F, K>(&Self, F)\n-> ExponentialGroupByKey<, T, F> where F: Fn(&T) -> K, K: PartialEq","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Returns an iterator on slice groups based that will use the given function to generate keys\n and determine groups based on them. It uses *exponential search* to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on slice groups based that will use the given function to generate keys","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11634,"byte_end":11729,"line_start":352,"line_end":352,"column_start":5,"column_end":100}},{"value":"/ and determine groups based on them. It uses *exponential search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11734,"byte_end":11826,"line_start":353,"line_end":353,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11831,"byte_end":11834,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11839,"byte_end":11907,"line_start":355,"line_end":355,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":11912,"byte_end":11944,"line_start":356,"line_end":356,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12289,"byte_end":12309,"line_start":365,"line_end":365,"column_start":8,"column_end":28},"name":"exponential_group_by","qualname":"::GroupBy::exponential_group_by","value":"pub fn exponential_group_by<P>(&Self, P) -> ExponentialGroupBy<, T, P> where\nP: FnMut(&T, &T) -> bool","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Returns an iterator on slice groups using the *exponential search* method.","sig":null,"attributes":[{"value":"/ Returns an iterator on slice groups using the *exponential search* method.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12085,"byte_end":12163,"line_start":361,"line_end":361,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12168,"byte_end":12171,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12176,"byte_end":12244,"line_start":363,"line_end":363,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12249,"byte_end":12281,"line_start":364,"line_end":364,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12777,"byte_end":12794,"line_start":375,"line_end":375,"column_start":8,"column_end":25},"name":"exponential_group","qualname":"::GroupBy::exponential_group","value":"pub fn exponential_group(&Self) -> ExponentialGroup<, T> where T: PartialEq","parent":{"krate":0,"index":583},"children":[],"decl_id":null,"docs":" Returns an iterator on slice groups based on the [`PartialEq::eq`] method of `T`,\n it uses *exponential search* to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on slice groups based on the [`PartialEq::eq`] method of `T`,","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12403,"byte_end":12488,"line_start":368,"line_end":368,"column_start":5,"column_end":90}},{"value":"/ it uses *exponential search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12493,"byte_end":12549,"line_start":369,"line_end":369,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12554,"byte_end":12557,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12562,"byte_end":12630,"line_start":371,"line_end":371,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12635,"byte_end":12667,"line_start":372,"line_end":372,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12672,"byte_end":12675,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12680,"byte_end":12769,"line_start":374,"line_end":374,"column_start":5,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":603},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12981,"byte_end":12991,"line_start":381,"line_end":381,"column_start":11,"column_end":21},"name":"GroupByMut","qualname":"::GroupByMut","value":"GroupByMut<T>","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":622}],"decl_id":null,"docs":" A convenient trait to construct an iterator returning non-overlapping *mutable*\n groups defined by a predicate.\n","sig":null,"attributes":[{"value":"/ A convenient trait to construct an iterator returning non-overlapping *mutable*","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12852,"byte_end":12935,"line_start":379,"line_end":379,"column_start":1,"column_end":84}},{"value":"/ groups defined by a predicate.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":12936,"byte_end":12970,"line_start":380,"line_end":380,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13214,"byte_end":13237,"line_start":386,"line_end":386,"column_start":8,"column_end":31},"name":"linear_group_by_key_mut","qualname":"::GroupByMut::linear_group_by_key_mut","value":"pub fn linear_group_by_key_mut<F, K>(&mut Self, F)\n-> LinearGroupByKeyMut<, T, F> where F: FnMut(&T) -> K, K: PartialEq","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* slice groups based that will use the given function\n to generate keys and determine groups based on them. It uses *linear search*\n to iterate over groups.\n","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* slice groups based that will use the given function","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13001,"byte_end":13089,"line_start":383,"line_end":383,"column_start":5,"column_end":93}},{"value":"/ to generate keys and determine groups based on them. It uses *linear search*","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13094,"byte_end":13174,"line_start":384,"line_end":384,"column_start":5,"column_end":85}},{"value":"/ to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13179,"byte_end":13206,"line_start":385,"line_end":385,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13442,"byte_end":13461,"line_start":391,"line_end":391,"column_start":8,"column_end":27},"name":"linear_group_by_mut","qualname":"::GroupByMut::linear_group_by_mut","value":"pub fn linear_group_by_mut<P>(&mut Self, P) -> LinearGroupByMut<, T, P> where\nP: FnMut(&T, &T) -> bool","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* slice groups using the *linear search* method.\n","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* slice groups using the *linear search* method.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13351,"byte_end":13434,"line_start":390,"line_end":390,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13818,"byte_end":13834,"line_start":398,"line_end":398,"column_start":8,"column_end":24},"name":"linear_group_mut","qualname":"::GroupByMut::linear_group_mut","value":"pub fn linear_group_mut(&mut Self) -> LinearGroupMut<, T> where T: PartialEq","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* slice groups based on the [`PartialEq::eq`] method of `T`,\n it uses *linear search* to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* slice groups based on the [`PartialEq::eq`] method of `T`,","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13557,"byte_end":13652,"line_start":394,"line_end":394,"column_start":5,"column_end":100}},{"value":"/ it uses *linear search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13657,"byte_end":13708,"line_start":395,"line_end":395,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13713,"byte_end":13716,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13721,"byte_end":13810,"line_start":397,"line_end":397,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14227,"byte_end":14250,"line_start":407,"line_end":407,"column_start":8,"column_end":31},"name":"binary_group_by_key_mut","qualname":"::GroupByMut::binary_group_by_key_mut","value":"pub fn binary_group_by_key_mut<F, K>(&mut Self, F)\n-> BinaryGroupByKeyMut<, T, F> where F: FnMut(&T) -> K, K: PartialEq","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* slice groups based that will use the given function\n to generate keys and determine groups based on them. It uses *binary search*\n to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* slice groups based that will use the given function","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13896,"byte_end":13984,"line_start":401,"line_end":401,"column_start":5,"column_end":93}},{"value":"/ to generate keys and determine groups based on them. It uses *binary search*","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":13989,"byte_end":14069,"line_start":402,"line_end":402,"column_start":5,"column_end":85}},{"value":"/ to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14074,"byte_end":14101,"line_start":403,"line_end":403,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14106,"byte_end":14109,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14114,"byte_end":14182,"line_start":405,"line_end":405,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14187,"byte_end":14219,"line_start":406,"line_end":406,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14573,"byte_end":14592,"line_start":415,"line_end":415,"column_start":8,"column_end":27},"name":"binary_group_by_mut","qualname":"::GroupByMut::binary_group_by_mut","value":"pub fn binary_group_by_mut<P>(&mut Self, P) -> BinaryGroupByMut<, T, P> where\nP: FnMut(&T, &T) -> bool","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* slice groups using the *binary search* method.","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* slice groups using the *binary search* method.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14364,"byte_end":14447,"line_start":411,"line_end":411,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14452,"byte_end":14455,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14460,"byte_end":14528,"line_start":413,"line_end":413,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14533,"byte_end":14565,"line_start":414,"line_end":414,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15067,"byte_end":15083,"line_start":425,"line_end":425,"column_start":8,"column_end":24},"name":"binary_group_mut","qualname":"::GroupByMut::binary_group_mut","value":"pub fn binary_group_mut(&mut Self) -> BinaryGroupMut<, T> where T: PartialEq","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* slice groups based on the [`PartialEq::eq`] method of `T`,\n it uses *binary search* to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* slice groups based on the [`PartialEq::eq`] method of `T`,","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14688,"byte_end":14783,"line_start":418,"line_end":418,"column_start":5,"column_end":100}},{"value":"/ it uses *binary search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14788,"byte_end":14839,"line_start":419,"line_end":419,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14844,"byte_end":14847,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14852,"byte_end":14920,"line_start":421,"line_end":421,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14925,"byte_end":14957,"line_start":422,"line_end":422,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14962,"byte_end":14965,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":14970,"byte_end":15059,"line_start":424,"line_end":424,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15481,"byte_end":15509,"line_start":434,"line_end":434,"column_start":8,"column_end":36},"name":"exponential_group_by_key_mut","qualname":"::GroupByMut::exponential_group_by_key_mut","value":"pub fn exponential_group_by_key_mut<F, K>(&mut Self, F)\n-> ExponentialGroupByKeyMut<, T, F> where F: Fn(&T) -> K, K: PartialEq","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* slice groups based that will use the given function\n to generate keys and determine groups based on them. It uses *exponential search*\n to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* slice groups based that will use the given function","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15145,"byte_end":15233,"line_start":428,"line_end":428,"column_start":5,"column_end":93}},{"value":"/ to generate keys and determine groups based on them. It uses *exponential search*","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15238,"byte_end":15323,"line_start":429,"line_end":429,"column_start":5,"column_end":90}},{"value":"/ to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15328,"byte_end":15355,"line_start":430,"line_end":430,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15360,"byte_end":15363,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15368,"byte_end":15436,"line_start":432,"line_end":432,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15441,"byte_end":15473,"line_start":433,"line_end":433,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15839,"byte_end":15863,"line_start":442,"line_end":442,"column_start":8,"column_end":32},"name":"exponential_group_by_mut","qualname":"::GroupByMut::exponential_group_by_mut","value":"pub fn exponential_group_by_mut<P>(&mut Self, P)\n-> ExponentialGroupByMut<, T, P> where P: FnMut(&T, &T) -> bool","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* slice groups using the *exponential search* method.","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* slice groups using the *exponential search* method.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15625,"byte_end":15713,"line_start":438,"line_end":438,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15718,"byte_end":15721,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15726,"byte_end":15794,"line_start":440,"line_end":440,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15799,"byte_end":15831,"line_start":441,"line_end":441,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":16348,"byte_end":16369,"line_start":452,"line_end":452,"column_start":8,"column_end":29},"name":"exponential_group_mut","qualname":"::GroupByMut::exponential_group_mut","value":"pub fn exponential_group_mut(&mut Self) -> ExponentialGroupMut<, T> where\nT: PartialEq","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* slice groups based on the [`PartialEq::eq`] method of `T`,\n it uses *exponential search* to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* slice groups based on the [`PartialEq::eq`] method of `T`,","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":15964,"byte_end":16059,"line_start":445,"line_end":445,"column_start":5,"column_end":100}},{"value":"/ it uses *exponential search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":16064,"byte_end":16120,"line_start":446,"line_end":446,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":16125,"byte_end":16128,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ The predicate function should implement an order consistent with","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":16133,"byte_end":16201,"line_start":448,"line_end":448,"column_start":5,"column_end":73}},{"value":"/ the sort order of the slice.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":16206,"byte_end":16238,"line_start":449,"line_end":449,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":16243,"byte_end":16246,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":16251,"byte_end":16340,"line_start":451,"line_end":451,"column_start":5,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":663},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":19582,"byte_end":19592,"line_start":578,"line_end":578,"column_start":11,"column_end":21},"name":"StrGroupBy","qualname":"::StrGroupBy","value":"StrGroupBy","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":669}],"decl_id":null,"docs":" A convenient trait to construct an iterator returning non-overlapping `str` slices\n defined by a predicate.\n","sig":null,"attributes":[{"value":"/ A convenient trait to construct an iterator returning non-overlapping `str` slices","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":19457,"byte_end":19543,"line_start":576,"line_end":576,"column_start":1,"column_end":87}},{"value":"/ defined by a predicate.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":19544,"byte_end":19571,"line_start":577,"line_end":577,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":19802,"byte_end":19821,"line_start":583,"line_end":583,"column_start":8,"column_end":27},"name":"linear_group_by_key","qualname":"::StrGroupBy::linear_group_by_key","value":"pub fn linear_group_by_key<F, K>(&Self, F) -> LinearStrGroupByKey<, F> where\nF: FnMut(char) -> K, K: PartialEq","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Returns an iterator on `str` groups based that will use the given function\n to generate keys and determine groups based on them. It uses *linear search*\n to iterate over groups.\n","sig":null,"attributes":[{"value":"/ Returns an iterator on `str` groups based that will use the given function","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":19599,"byte_end":19677,"line_start":580,"line_end":580,"column_start":5,"column_end":83}},{"value":"/ to generate keys and determine groups based on them. It uses *linear search*","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":19682,"byte_end":19762,"line_start":581,"line_end":581,"column_start":5,"column_end":85}},{"value":"/ to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":19767,"byte_end":19794,"line_start":582,"line_end":582,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20011,"byte_end":20026,"line_start":588,"line_end":588,"column_start":8,"column_end":23},"name":"linear_group_by","qualname":"::StrGroupBy::linear_group_by","value":"pub fn linear_group_by<P>(&Self, P) -> LinearStrGroupBy<, P> where\nP: FnMut(char, char) -> bool","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Returns an iterator on `str` groups using the *linear search* method.\n","sig":null,"attributes":[{"value":"/ Returns an iterator on `str` groups using the *linear search* method.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":19930,"byte_end":20003,"line_start":587,"line_end":587,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20381,"byte_end":20393,"line_start":595,"line_end":595,"column_start":8,"column_end":20},"name":"linear_group","qualname":"::StrGroupBy::linear_group","value":"pub fn linear_group(&Self) -> LinearStrGroup","parent":{"krate":0,"index":663},"children":[],"decl_id":null,"docs":" Returns an iterator on `str` groups based on the [`PartialEq::eq`] method of `char`,\n it uses *linear search* to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on `str` groups based on the [`PartialEq::eq`] method of `char`,","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20119,"byte_end":20207,"line_start":591,"line_end":591,"column_start":5,"column_end":93}},{"value":"/ it uses *linear search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20212,"byte_end":20263,"line_start":592,"line_end":592,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20268,"byte_end":20271,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/primitive.char.html#impl-PartialEq%3Cchar%3E","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20276,"byte_end":20373,"line_start":594,"line_end":594,"column_start":5,"column_end":102}}]},{"kind":"Trait","id":{"krate":0,"index":670},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20558,"byte_end":20571,"line_start":600,"line_end":600,"column_start":11,"column_end":24},"name":"StrGroupByMut","qualname":"::StrGroupByMut","value":"StrGroupByMut","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":674},{"krate":0,"index":676}],"decl_id":null,"docs":" A convenient trait to construct an iterator returning non-overlapping *mutable* `str` slices\n defined by a predicate.\n","sig":null,"attributes":[{"value":"/ A convenient trait to construct an iterator returning non-overlapping *mutable* `str` slices","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20423,"byte_end":20519,"line_start":598,"line_end":598,"column_start":1,"column_end":97}},{"value":"/ defined by a predicate.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20520,"byte_end":20547,"line_start":599,"line_end":599,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20791,"byte_end":20814,"line_start":605,"line_end":605,"column_start":8,"column_end":31},"name":"linear_group_by_key_mut","qualname":"::StrGroupByMut::linear_group_by_key_mut","value":"pub fn linear_group_by_key_mut<F, K>(&mut Self, F)\n-> LinearStrGroupByKeyMut<, F> where F: FnMut(char) -> K, K: PartialEq","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* `str` groups based that will use the given function\n to generate keys and determine groups based on them. It uses *linear search*\n to iterate over groups.\n","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* `str` groups based that will use the given function","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20578,"byte_end":20666,"line_start":602,"line_end":602,"column_start":5,"column_end":93}},{"value":"/ to generate keys and determine groups based on them. It uses *linear search*","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20671,"byte_end":20751,"line_start":603,"line_end":603,"column_start":5,"column_end":85}},{"value":"/ to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20756,"byte_end":20783,"line_start":604,"line_end":604,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":21021,"byte_end":21040,"line_start":610,"line_end":610,"column_start":8,"column_end":27},"name":"linear_group_by_mut","qualname":"::StrGroupByMut::linear_group_by_mut","value":"pub fn linear_group_by_mut<P>(&mut Self, P) -> LinearStrGroupByMut<, P> where\nP: FnMut(char, char) -> bool","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* `str` groups using the *linear search* method.\n","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* `str` groups using the *linear search* method.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":20930,"byte_end":21013,"line_start":609,"line_end":609,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":21412,"byte_end":21428,"line_start":617,"line_end":617,"column_start":8,"column_end":24},"name":"linear_group_mut","qualname":"::StrGroupByMut::linear_group_mut","value":"pub fn linear_group_mut(&mut Self) -> LinearStrGroupMut","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Returns an iterator on *mutable* `str` groups based on the [`PartialEq::eq`] method of `char`,\n it uses *linear search* to iterate over groups.","sig":null,"attributes":[{"value":"/ Returns an iterator on *mutable* `str` groups based on the [`PartialEq::eq`] method of `char`,","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":21140,"byte_end":21238,"line_start":613,"line_end":613,"column_start":5,"column_end":103}},{"value":"/ it uses *linear search* to iterate over groups.","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":21243,"byte_end":21294,"line_start":614,"line_end":614,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":21299,"byte_end":21302,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ [`PartialEq::eq`]: https://doc.rust-lang.org/std/primitive.char.html#impl-PartialEq%3Cchar%3E","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/lib.rs","byte_start":21307,"byte_end":21404,"line_start":616,"line_end":616,"column_start":5,"column_end":102}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31574,"byte_end":31585,"line_start":12,"line_end":12,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":32255,"byte_end":32269,"line_start":31,"line_end":31,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37392,"byte_end":37405,"line_start":138,"line_end":138,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37718,"byte_end":37731,"line_start":151,"line_end":151,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38033,"byte_end":38046,"line_start":160,"line_end":160,"column_start":48,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38708,"byte_end":38724,"line_start":182,"line_end":182,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":39049,"byte_end":39065,"line_start":195,"line_end":195,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":39382,"byte_end":39398,"line_start":204,"line_end":204,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":44760,"byte_end":44776,"line_start":140,"line_end":140,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45059,"byte_end":45075,"line_start":151,"line_end":151,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45377,"byte_end":45393,"line_start":160,"line_end":160,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":46052,"byte_end":46071,"line_start":183,"line_end":183,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":46369,"byte_end":46388,"line_start":194,"line_end":194,"column_start":20,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":46705,"byte_end":46724,"line_start":203,"line_end":203,"column_start":48,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55235,"byte_end":55246,"line_start":12,"line_end":12,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55998,"byte_end":56012,"line_start":31,"line_end":31,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59292,"byte_end":59305,"line_start":94,"line_end":94,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59595,"byte_end":59608,"line_start":105,"line_end":105,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59910,"byte_end":59923,"line_start":114,"line_end":114,"column_start":48,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60633,"byte_end":60649,"line_start":136,"line_end":136,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60986,"byte_end":61002,"line_start":149,"line_end":149,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":61319,"byte_end":61335,"line_start":158,"line_end":158,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":64794,"byte_end":64810,"line_start":97,"line_end":97,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65089,"byte_end":65105,"line_start":108,"line_end":108,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65407,"byte_end":65423,"line_start":117,"line_end":117,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":66077,"byte_end":66096,"line_start":139,"line_end":139,"column_start":20,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":66390,"byte_end":66409,"line_start":150,"line_end":150,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":66711,"byte_end":66730,"line_start":159,"line_end":159,"column_start":48,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75338,"byte_end":75354,"line_start":12,"line_end":12,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":76141,"byte_end":76160,"line_start":31,"line_end":31,"column_start":17,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79468,"byte_end":79486,"line_start":92,"line_end":92,"column_start":20,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79813,"byte_end":79831,"line_start":105,"line_end":105,"column_start":20,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80133,"byte_end":80151,"line_start":114,"line_end":114,"column_start":48,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80886,"byte_end":80907,"line_start":136,"line_end":136,"column_start":20,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":81249,"byte_end":81270,"line_start":149,"line_end":149,"column_start":20,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":81587,"byte_end":81608,"line_start":158,"line_end":158,"column_start":48,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":85087,"byte_end":85108,"line_start":95,"line_end":95,"column_start":20,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":85396,"byte_end":85417,"line_start":106,"line_end":106,"column_start":20,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":85719,"byte_end":85740,"line_start":115,"line_end":115,"column_start":48,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86419,"byte_end":86443,"line_start":137,"line_end":137,"column_start":20,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86746,"byte_end":86770,"line_start":148,"line_end":148,"column_start":20,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":87087,"byte_end":87111,"line_start":157,"line_end":157,"column_start":48,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93282,"byte_end":93296,"line_start":11,"line_end":11,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93867,"byte_end":93884,"line_start":27,"line_end":27,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97339,"byte_end":97355,"line_start":98,"line_end":98,"column_start":13,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97839,"byte_end":97858,"line_start":115,"line_end":115,"column_start":13,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101449,"byte_end":101468,"line_start":102,"line_end":102,"column_start":13,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101996,"byte_end":102018,"line_start":120,"line_end":120,"column_start":13,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":31574,"byte_end":31585,"line_start":12,"line_end":12,"column_start":17,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":9},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group.rs","byte_start":32255,"byte_end":32269,"line_start":31,"line_end":31,"column_start":17,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37392,"byte_end":37405,"line_start":138,"line_end":138,"column_start":20,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":36},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":37718,"byte_end":37731,"line_start":151,"line_end":151,"column_start":20,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":36},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38033,"byte_end":38046,"line_start":160,"line_end":160,"column_start":48,"column_end":61},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":36},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":38708,"byte_end":38724,"line_start":182,"line_end":182,"column_start":20,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":59},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":39049,"byte_end":39065,"line_start":195,"line_end":195,"column_start":20,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":59},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by.rs","byte_start":39382,"byte_end":39398,"line_start":204,"line_end":204,"column_start":48,"column_end":64},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":59},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":44760,"byte_end":44776,"line_start":140,"line_end":140,"column_start":16,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45059,"byte_end":45075,"line_start":151,"line_end":151,"column_start":20,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":45377,"byte_end":45393,"line_start":160,"line_end":160,"column_start":48,"column_end":64},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":46052,"byte_end":46071,"line_start":183,"line_end":183,"column_start":16,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":46369,"byte_end":46388,"line_start":194,"line_end":194,"column_start":20,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_group/linear_group_by_key.rs","byte_start":46705,"byte_end":46724,"line_start":203,"line_end":203,"column_start":48,"column_end":67},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":114},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55235,"byte_end":55246,"line_start":12,"line_end":12,"column_start":17,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group.rs","byte_start":55998,"byte_end":56012,"line_start":31,"line_end":31,"column_start":17,"column_end":31},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59292,"byte_end":59305,"line_start":94,"line_end":94,"column_start":20,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59595,"byte_end":59608,"line_start":105,"line_end":105,"column_start":20,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":59910,"byte_end":59923,"line_start":114,"line_end":114,"column_start":48,"column_end":61},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":181},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60633,"byte_end":60649,"line_start":136,"line_end":136,"column_start":20,"column_end":36},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":60986,"byte_end":61002,"line_start":149,"line_end":149,"column_start":20,"column_end":36},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by.rs","byte_start":61319,"byte_end":61335,"line_start":158,"line_end":158,"column_start":48,"column_end":64},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":204},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":64794,"byte_end":64810,"line_start":97,"line_end":97,"column_start":20,"column_end":36},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65089,"byte_end":65105,"line_start":108,"line_end":108,"column_start":16,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":65407,"byte_end":65423,"line_start":117,"line_end":117,"column_start":48,"column_end":64},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":239},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":66077,"byte_end":66096,"line_start":139,"line_end":139,"column_start":20,"column_end":39},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":66390,"byte_end":66409,"line_start":150,"line_end":150,"column_start":16,"column_end":35},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/binary_group/binary_group_by_key.rs","byte_start":66711,"byte_end":66730,"line_start":159,"line_end":159,"column_start":48,"column_end":67},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":262},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":75338,"byte_end":75354,"line_start":12,"line_end":12,"column_start":17,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":299},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group.rs","byte_start":76141,"byte_end":76160,"line_start":31,"line_end":31,"column_start":17,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79468,"byte_end":79486,"line_start":92,"line_end":92,"column_start":20,"column_end":38},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":79813,"byte_end":79831,"line_start":105,"line_end":105,"column_start":20,"column_end":38},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80133,"byte_end":80151,"line_start":114,"line_end":114,"column_start":48,"column_end":66},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":331},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":80886,"byte_end":80907,"line_start":136,"line_end":136,"column_start":20,"column_end":41},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":81249,"byte_end":81270,"line_start":149,"line_end":149,"column_start":20,"column_end":41},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by.rs","byte_start":81587,"byte_end":81608,"line_start":158,"line_end":158,"column_start":48,"column_end":69},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":354},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":85087,"byte_end":85108,"line_start":95,"line_end":95,"column_start":20,"column_end":41},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":85396,"byte_end":85417,"line_start":106,"line_end":106,"column_start":20,"column_end":41},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":85719,"byte_end":85740,"line_start":115,"line_end":115,"column_start":48,"column_end":69},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":391},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86419,"byte_end":86443,"line_start":137,"line_end":137,"column_start":20,"column_end":44},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":86746,"byte_end":86770,"line_start":148,"line_end":148,"column_start":20,"column_end":44},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/exponential_group/exponential_group_by_key.rs","byte_start":87087,"byte_end":87111,"line_start":157,"line_end":157,"column_start":48,"column_end":72},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":414},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93282,"byte_end":93296,"line_start":11,"line_end":11,"column_start":10,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group.rs","byte_start":93867,"byte_end":93884,"line_start":27,"line_end":27,"column_start":10,"column_end":27},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97339,"byte_end":97355,"line_start":98,"line_end":98,"column_start":13,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by.rs","byte_start":97839,"byte_end":97858,"line_start":115,"line_end":115,"column_start":13,"column_end":32},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101449,"byte_end":101468,"line_start":102,"line_end":102,"column_start":13,"column_end":32},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/d33p/.cargo/registry/src/github.com-1ecc6299db9ec823/slice-group-by-0.2.6/src/linear_str_group/linear_str_group_by_key.rs","byte_start":101996,"byte_end":102018,"line_start":120,"line_end":120,"column_start":13,"column_end":35},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":513},"to":{"krate":4294967295,"index":4294967295}}]}